{"version":3,"sources":["Countdown.tsx","DatetimeInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["props","startTime","endTime","now","getTime","role","aria-label","countdownDetails","msRemaining","daysRemaining","Math","floor","hourInMs","hoursRemaining","minuteInMs","minutesRemaining","secondInMs","secondsRemaining","calculateCountdown","Row","className","Col","xs","InputGroup","style","display","marginBottom","margin","label","selected","time","onChange","dateFormat","showTimeSelect","showTimeSelectOnly","App","Date","state","inErrorState","this","setState","isNaN","parse","Object","assign","json","JSON","stringify","window","location","hash","Base64","encode","decoded","decode","isLegalState","validateState","encodeHashFragment","maybeState","decodeHashFragment","setInterval","tick","max","min","completed","id","newTime","newState","postSetState","percentageCompleted","calculatePercentageCompleted","textAlign","Container","ProgressBar","height","striped","variant","Alert","Countdown","DatetimeInput","stateIdentifier","handleInput","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35e71634.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface CountdownProps {\n  now: Date;\n  startTime: Date | null;\n  endTime: Date | null;\n}\n\ninterface CountdownDetails {\n  daysRemaining: number;\n  hoursRemaining: number;\n  minutesRemaining: number;\n  secondsRemaining: number;\n}\n\nconst calculateCountdown = (now: Date, endTime: Date): CountdownDetails => {\n  let msRemaining = endTime.getTime() - now.getTime();\n\n  const secondInMs = 1000;\n  const minuteInMs = secondInMs * 60;\n  const hourInMs = minuteInMs * 60;\n  const dayInMs = hourInMs * 24;\n\n  const daysRemaining = Math.floor(msRemaining / dayInMs);\n  msRemaining -= daysRemaining * dayInMs;\n\n  const hoursRemaining = Math.floor(msRemaining / hourInMs);\n  msRemaining -= hoursRemaining * hourInMs;\n\n  const minutesRemaining = Math.floor(msRemaining / minuteInMs);\n  msRemaining -= minutesRemaining * minuteInMs;\n\n  const secondsRemaining = Math.floor(msRemaining / secondInMs);\n\n  return {\n    daysRemaining,\n    hoursRemaining,\n    minutesRemaining,\n    secondsRemaining,\n  };\n};\n\nexport default (props: CountdownProps) => {\n  if (props.startTime == null || props.endTime == null) {\n    return null;\n  }\n\n  const countdownCompleted = props.now.getTime() >= props.endTime.getTime();\n\n  if (countdownCompleted) {\n    return (\n      <span role=\"img\" aria-label=\"party popper\">\n        ðŸŽ‰ðŸŽ‰ðŸŽ‰\n      </span>\n    );\n  }\n\n  const countdownDetails = calculateCountdown(props.now, props.endTime);\n\n  return (\n    <>\n      {`${countdownDetails.daysRemaining}d ${countdownDetails.hoursRemaining}h\n      ${countdownDetails.minutesRemaining}m ${countdownDetails.secondsRemaining}s`}\n    </>\n  );\n};\n","import React from \"react\";\n\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Row from \"react-bootstrap/Row\";\nimport DatePicker from \"react-datepicker\";\n\ninterface DatetimeInputProps {\n  label: string;\n  stateIdentifier: string;\n\n  time: Date | null;\n  onChange: (date: Date | null) => void;\n}\n\nexport default (props: DatetimeInputProps) => {\n  return (\n    <Row className=\"justify-content-center\">\n      <Col xs=\"auto\">\n        <InputGroup style={{ display: \"block\", marginBottom: \"1rem\" }}>\n          <Row className=\"justify-content-center\">\n            <p style={{ margin: 0 }}>{props.label}</p>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <DatePicker\n              selected={props.time}\n              onChange={props.onChange}\n              dateFormat=\"MMMM d, yyyy\"\n            />\n            <DatePicker\n              showTimeSelect\n              showTimeSelectOnly\n              selected={props.time}\n              onChange={props.onChange}\n              dateFormat=\"h:mm aa\"\n            />\n          </Row>\n        </InputGroup>\n      </Col>\n    </Row>\n  );\n};\n","import React from \"react\";\nimport { Base64 } from \"js-base64\";\n\nimport Alert from \"react-bootstrap/Alert\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Row from \"react-bootstrap/Row\";\nimport DatePicker from \"react-datepicker\";\nimport Countdown from \"./Countdown\";\nimport DatetimeInput from \"./DatetimeInput\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./overrides.css\";\n\ninterface Props {}\n\ninterface EncodableState {\n  startTime: Date | null;\n  endTime: Date | null;\n}\n\ntype State = EncodableState & {\n  now: Date;\n  inErrorState: boolean;\n};\n\nclass App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    const now = new Date();\n    const minuteInMs = 60 * 1000;\n    this.state = {\n      now: now,\n      startTime: now,\n      endTime: new Date(now.getTime() + minuteInMs),\n      inErrorState: false,\n    };\n  }\n\n  validateState() {\n    if (this.state.startTime == null || this.state.endTime == null) {\n      return;\n    }\n\n    if (this.state.startTime > this.state.endTime) {\n      this.setState({\n        ...this.state,\n        inErrorState: true,\n      });\n    } else {\n      this.setState({\n        ...this.state,\n        inErrorState: false,\n      });\n    }\n  }\n\n  isLegalState(state: any) {\n    const notIllegal =\n      state[\"startTime\"] &&\n      !isNaN(Date.parse(state[\"startTime\"])) &&\n      state[\"endTime\"] &&\n      !isNaN(Date.parse(state[\"endTime\"]));\n    return notIllegal;\n  }\n\n  encodeHashFragment() {\n    const state = Object.assign({}, this.state) as State;\n\n    // Strip unnecessary properties\n    delete state[\"now\"];\n    delete state[\"inErrorState\"];\n\n    const json = JSON.stringify(state);\n    window.location.hash = Base64.encode(json);\n  }\n\n  decodeHashFragment(): EncodableState | null {\n    const hash = window.location.hash;\n    const decoded = Base64.decode(hash);\n    const state = JSON.parse(decoded);\n\n    if (this.isLegalState(state)) {\n      return {\n        startTime: new Date(state[\"startTime\"]),\n        endTime: new Date(state[\"endTime\"]),\n      };\n    }\n\n    return null;\n  }\n\n  postSetState() {\n    this.validateState();\n    this.encodeHashFragment();\n  }\n\n  tick() {\n    // This is trivial enough to skip validateState\n    this.setState({\n      now: new Date(),\n    });\n  }\n\n  componentDidMount() {\n    let maybeState;\n    try {\n      maybeState = this.decodeHashFragment();\n    } catch {\n      // Do nothing\n    }\n    if (maybeState) {\n      this.setState(\n        {\n          ...this.state,\n          ...maybeState,\n        },\n        this.validateState\n      );\n    } else {\n      this.encodeHashFragment();\n    }\n\n    setInterval(() => {\n      this.tick();\n    }, 1000);\n  }\n\n  calculatePercentageCompleted(startTime: Date, endTime: Date) {\n    // Force now to be within the start - end range\n    // to prevent weird return values (<0 or >100)\n    const now = Math.max(\n      Math.min(Date.now(), endTime.getTime()),\n      startTime.getTime()\n    );\n\n    // Prevent infinity return value\n    if (endTime === startTime) {\n      return 100;\n    }\n\n    const completed =\n      (now - startTime.getTime()) / (endTime.getTime() - startTime.getTime());\n    return Math.min(Math.floor(completed * 10000) / 100, 100);\n  }\n\n  handleInput(id: string) {\n    return (newTime: Date | null) => {\n      const newState = {\n        ...this.state,\n        [id]: newTime,\n      };\n\n      this.setState(newState, this.postSetState);\n    };\n  }\n\n  render() {\n    let percentageCompleted = 0;\n    if (this.state.startTime != null && this.state.endTime != null) {\n      percentageCompleted = this.calculatePercentageCompleted(\n        this.state.startTime,\n        this.state.endTime\n      );\n    }\n\n    return (\n      <div className=\"App\" style={{ margin: \"2rem\" }}>\n        <div style={{ margin: \"1rem auto\", textAlign: \"center\" }}>\n          <h1>quarantime</h1>\n          <h2>visually progressive countdown</h2>\n        </div>\n\n        <Container>\n          <ProgressBar\n            style={{ height: \"2rem\", marginBottom: \"3rem\" }}\n            label={`${percentageCompleted}%`}\n            now={percentageCompleted}\n            striped\n            variant=\"success\"\n          />\n\n          {this.state.inErrorState ? (\n            <Alert variant=\"danger\">You have entered invalid values</Alert>\n          ) : (\n            <div style={{ textAlign: \"center\" }}>\n              <h2>\n                <Countdown\n                  now={this.state.now}\n                  startTime={this.state.startTime}\n                  endTime={this.state.endTime}\n                />\n              </h2>\n            </div>\n          )}\n          <Container style={{ margin: \"2rem auto\" }}>\n            <DatetimeInput\n              label=\"Start\"\n              stateIdentifier=\"startTime\"\n              time={this.state.startTime}\n              onChange={this.handleInput(\"startTime\")}\n            />\n\n            <DatetimeInput\n              label=\"End\"\n              stateIdentifier=\"endTime\"\n              time={this.state.endTime}\n              onChange={this.handleInput(\"endTime\")}\n            />\n          </Container>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}